#+TITLE: Implementation notes


* TODO-list

** TODO hardware-configuration.nix?
** TODO how to look up available packages?


#+begin_example
nix-env -f '<nixpkgs>' -iA emacs
#+end_example

- Are there any shorter commands?
- look up packages?
  - nix search wget
  - FIXME nix-env -qA emacs

** TODO stumpwm
1. the WM is installed using wm.stumpwm.enable = true, thus I must make my
   stumpwm package overwrite globally. This is defined in
   nixpkgs/nixos/modules/services/x11/window-managers/stumpwm.nix

2. there are two piece of definition.
   - nixpkgs/pkgs/development/lisp-modules/quicklisp-to-nix-output/stumpwm.nix,
     and this seems to be lispPackages.stumpwm?
   - nixpkgs/pkgs/applications/window-managers/stumpwm/default.nix, which should
     not be lispPackages.stumpwm, then what is it?

The lisp system support seems to be pretty bad. I probably just stick with guix
and work out the non-free staff and linux kernel.

Currently, I cannot build all lispPackages.XXX, with the error

#+begin_example
/nix/store/whpnlfj79vd8p175rp1bwg0x7wz5lmj1-stdenv-linux/setup: line 320: [@]: bad substitution
#+end_example

I ran the following command in local nixpkgs root:
#+begin_example
nix-build -A lispPackages.cl-ppcre
#+end_example

It looks like it recovered when I reboot the system.

I can clone a local nixpkgs tree, and build the system using it via

#+begin_example
nixos-rebuild switch -I nixpkgs=/path/to/nixpkgs
#+end_example

But now I'm using the master branch, all packages would be upgraded. This is
typically not what I want, because I would need to build tons of staff from
source. The right way would be to override just this package. How to do that?

It does not look easy to extract out, nor overwrite, as it compose with many nix
scritps to generate a lisp package. If modify in place, the `which stumpwm`
returns the path with actually the correct clx-truetype set, but still cannot
load. I'm trying restart the system, if still not working, I'll not use NixOS
because the nix language and the offical nikpkgs is not well structured.

** TODO multiple DE
** TODO nvidia driver
** TODO sway
The border feature.
** DPI
** libinput natural scroll

* Wiki draft

** nixos

=man configuration.nix= shows all options offline.

build a system without switch to it, for testing

#+begin_example
nixos-rebuild build
#+end_example

build and switch

#+begin_example
nixos-rebuild switch
#+end_example

To rebuild nixos with a local nixpkgs tree:

#+begin_example
nixos-rebuild switch -I nixpkgs=/path/to/nixpkgs
#+end_example

To run repl

#+begin_example
nix repl
#+end_example

Inside REPL, you can query the value of each option.

=/var/log= goes into =~/.nix-profile/var/log/=

** package development

To build a nix script

#+begin_example
nix-build xxx.nix
#+end_example

To access pkgs in .nix:
#+begin_example
pkgs = import <nixpkgs> {};
#+end_example


** package management

search

#+begin_example
nix-env -qaP '.*emacs.*'
#+end_example

To install packages

#+begin_example
nix-env -iA nixos.thunderbird
#+end_example

=nix-env -f '<nixpkgs>' -ia emacs= sets nixpkgs repo explicitly, the default is
=~/.nix-defexpr=, which has =nixos= link to =/nix/store/xxx-nixos-19.09=. During
system installation, it seems to be recommanded to use =-f
'<nixpkgs>'=. =<nixpkgs>= seems to be the channel name.

uninstall a package

#+begin_example
nix-env -e thunderbird
#+end_example

list installed

#+begin_example
nix-env -q
#+end_example

list generation:

#+begin_example
nix-env --list-generations
#+end_example

roll back

#+begin_example
nix-env --rollback
#+end_example

** TODO local package manifest


** channel
list current channel:

#+begin_example
sudo nix-channel --list
# >>> nixos https://nixos.org/channels/nixos-19.09
#+end_example

Add the unstable channel:

#+begin_example
sudo nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
#+end_example

Do a full upgrade:

#+begin_example
sudo nixos-rebuild switch --upgrade
#+end_example

Note that the channel setting is per-user, so for system upgrade, you need to set the root's channel.

Remove a channel:

#+begin_example
nix-channel --remove nixpkgs
#+end_example

Obtain the latest content from the channels:

#+begin_example
nix-channel --update
#+end_example

To upgrade all your packages

#+begin_example
nix-env -u
#+end_example

* References
- https://github.com/michaelpj/nixos-config
- https://github.com/Tmplt/nixos-config: wlan, secrets
- https://github.com/benley/dotfiles many machines, many dot files, pretty good
- https://nixos.wiki/wiki/Configuration_Collection
